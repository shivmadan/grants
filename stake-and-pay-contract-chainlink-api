// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "https://github.com/smartcontractkit/chainlink/blob/master/evm-contracts/src/v0.8/interfaces/AggregatorV3Interface.sol";

contract StakingContract {
    struct Stake {
        uint256 balance;
        uint256 lastClaimed;
        uint256 rewardBalance;
        bool staked;
    }
    mapping(address => Stake) public stakes;
    uint256 public constant minimumStake = 100;
    uint256 public constant rewardRate = 1;
    uint256 public constant claimInterval = 1 days;
    address public immutable token;
    address public immutable oracle;
    uint256 public immutable priceDecimals;
    address[] public rewardRecipients;
    mapping(address => uint256) public rewardIndices;

    constructor(address _token, address _oracle) {
        token = _token;
        oracle = _oracle;
        AggregatorV3Interface priceFeed = AggregatorV3Interface(oracle);
        priceDecimals = priceFeed.decimals();
    }

    function stake(uint256 amount) external {
        require(amount >= minimumStake, "Minimum stake not met");
        require(stakes[msg.sender].staked == false, "Already staked");
        require(IERC20(token).transferFrom(msg.sender, address(this), amount), "Token transfer failed");

        stakes[msg.sender] = Stake(amount, block.timestamp, 0, true);
    }

    function unstake() external {
        require(stakes[msg.sender].staked == true, "Not staked");

        uint256 amount = stakes[msg.sender].balance;
        require(IERC20(token).transfer(msg.sender, amount), "Token transfer failed");

        delete stakes[msg.sender];
    }

    function claim() external {
        Stake storage stake = stakes[msg.sender];
        require(stake.staked == true, "Not staked");

        uint256 elapsedTime = block.timestamp - stake.lastClaimed;
        require(elapsedTime >= claimInterval, "Claim interval not met");

        uint256 price = getPrice();
        uint256 reward = (stake.balance * rewardRate * price) / (10 ** priceDecimals);
        stake.rewardBalance += reward;
        stake.lastClaimed = block.timestamp;

        if (rewardIndices[msg.sender] == 0) {
            rewardRecipients.push(msg.sender);
            rewardIndices[msg.sender] = rewardRecipients.length;
        }
    }

    function withdrawReward() external {
        Stake storage stake = stakes[msg.sender];
        require(stake.rewardBalance > 0, "No rewards to withdraw");

        uint256 amount = stake.rewardBalance;
        stake.rewardBalance = 0;
        require(IERC20(token).transfer(msg.sender, amount), "Token transfer failed");
    }

    function getPrice() public view returns (uint256) {
        AggregatorV3Interface priceFeed = AggregatorV3Interface(oracle);
        (, int256 answer, , , ) = priceFeed.latestRoundData();
        require(answer > 0, "Price data not available");

        return uint256(answer);
    }

    function getRewardRecipients() external view returns (address[] memory) {
        return rewardRecipients;
    }
}
